---
    - name: Get the Ingress Service Details
      k8s_info:
        kind: Service
        api_version: v1
        name: "{{ spec.ingress }}"
        namespace: "{{ meta.namespace }}"
      register: service_info

    - name: Dump the Service Info
      debug:
        msg: "{{ service_info }}"
      when: ansible_verbosity > 2

    - name: process selectors
      set_fact:
        pod_selectors: "{{ pod_selectors | default([]) + [ item.key ~ ' = ' ~ item.value ] }}"
      with_dict: "{{ service_info.resources.0.spec.selector }}"

    - name: Get the Ingress Server Pods
      k8s_info:
        kind: Pod
        api_version: v1
        namespace: "{{ meta.namespace }}"
        label_selectors: "{{ pod_selectors }}"
      register: pod_info

    - name: Dump the Pods result
      debug:
        msg: "{{ pod_info }}"
      when: ansible_verbosity > 2

    - name: Build workgroup for NodePort deployment
      block:

        - name: Get the NodePorts for the service
          set_fact:
            node_port: "{{ service_info.resources.0.spec | json_query( target_port_query ) }}" 
          vars:
            target_port_query: "ports[?targetPort==`{{ spec.workload.targetPort }}`].nodePort"

        - name: Generate the workload list
          set_fact:
            node_ips: "{{ node_ips | default([]) + [ ( spec.workload.scheme | default('http') )  ~ '://' ~ item ~ ':' ~ node_port.0 ~ ( spec.workload.path | default() ) ] }}"
          with_list: "{{ pod_info | json_query( pod_name_query ) }}"
          vars:
            pod_name_query: "resources[?metadata.deletionTimestamp == ''].status.hostIP"
          when: spec.workload.crcOverride is undefined

        - name: Use CRC Override IP for workload list
          set_fact:
            node_ips: "{{ [ ( spec.workload.scheme | default('http') )  ~ '://' ~ spec.workload.crcOverride ~ ':' ~ node_port.0 ~ ( spec.workload.path | default() ) ] }}"
          when: spec.workload.crcOverride is defined

      when: service_info.resources.0.spec.type == "NodePort"

    - name: Build workgroup for NodePort deployment
      block:

        - name: Generate the workload list
          set_fact:
            node_ips: "{{ node_ips | default([]) + [ ( spec.workload.scheme | default('http') )  ~ '://' ~ item ~ ':' ~ spec.workload.targetPort ~ ( spec.workload.path | default() ) ] }}"
          with_list: "{{ pod_info | json_query( pod_name_query ) }}"
          vars:
            pod_name_query: "resources[? ! contains(keys(metadata),'deletionTimestamp')].status.podIP"

      when: service_info.resources.0.spec.type != "NodePort"

    - name: Dump the Nodes list
      debug:
        msg: "{{ node_ips }}"
      when: ansible_verbosity > 2

    - name: Add workloads to desiredState
      set_fact:
        spec: "{{ spec | default({}) | combine( { 'desiredState':{ 'backend':{ 'workloadGroups':{ 'group':{ 'uris': { item: {}} }}}}}, recursive=True) }}"
      with_list: "{{ node_ips }}"

    - name: set the gatewayRefs
      set_fact:
        spec: "{{ spec | default({}) | combine( { 'desiredState': { 'ingress':{ 'gatewayRefs': [ { 'ref': '/services/environments/' ~ nginx_controller_environmentName ~ '/gateways/' ~ meta.namespace ~ '.' ~ spec.gateway } ] }}}, recursive=True) }}"

    - name: Dump the final spec
      debug:
        msg: "{{ spec }}"
      when: ansible_verbosity > 2

    - name: Send the configuration to controller
      include_role:
        name: nginxinc.nginx_controller.nginx_controller_component
      vars:
        nginx_controller_appName: "{{ meta.namespace ~ '.' ~ spec.application }}"
        nginx_controller_component:
          metadata:
            name: "{{ meta.name }}"
            displayName: "{{ spec.displayName | default( meta.namespace ~ '.' ~ meta.name) }}"
            description: "{{ spec.description | default('Managed by NGINX-lb-operator') }}"
          desiredState: "{{ spec.desiredState | default({}) }}"

...

