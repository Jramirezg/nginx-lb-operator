---
- hosts: localhost
  gather_facts: no
  connection: local
  collections:
    - community.kubernetes
    - operator_sdk.util
    - nginxinc.nginx_controller
  vars:
    ansible_verbosity: "{{ lookup('env','ANSIBLE_VERBOSITY_DEPLOYMENT_APPS') }}"
    resource_type: "Deployment"

  tasks:

    - name: Work around Ansible snake_casing our vars
      set_fact:
        spec: "{{ _apps_deployment_spec }}"
        resource: "{{ _apps_deployment }}"

    - name: Dump the Resource
      debug:
        msg: "{{ resource }}"
      when: ansible_verbosity > 2

    - name: Wait for Kubernetes to complete pod changes
      k8s_info:
        kind: Deployment
        api_version: v1
        name: "{{ meta.name }}"
        namespace: "{{ meta.namespace }}"
      register: deployment_status
      until: (deployment_status.resources is defined) and
             (deployment_status.resources.0.spec.replicas  == deployment_status.resources.0.status.availableReplicas )
      retries: 10
      delay: 2
      ignore_errors: true

    - name: Get the Components
      k8s_info:
        kind: Component
        api_version: lb.nginx.com/v1alpha1
        label_selectors:
          - "deployment = {{ meta.name ~ '.' ~ meta.namespace }}"
      register: components

    - name: Dump the Components
      debug:
        msg: "{{ components }}"
      when: ansible_verbosity > 2

    - name: Update all Components with labels linked to this deployment
      include_tasks: tasks/component_loop.yml
      with_list: "{{ components.resources }}"
      when: components.resources | length > 0

